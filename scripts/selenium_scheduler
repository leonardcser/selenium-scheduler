#!/usr/bin/env python3
import argparse
import os
from pathlib import Path
import shutil
import subprocess
from string import Template

PROJECT_DIR = Path.cwd().name
DOT_DIR = Path.home() / ".selenium_scheduler"
DEST_DIR = DOT_DIR / PROJECT_DIR

LAUNCH_AGENT_DIR = Path.home() / "Library/LaunchAgents"
LAUNCH_AGENT_NAME = f"selenium_scheduler.startup.{PROJECT_DIR}"
LAUNCH_AGENT_FILE_NAME = f"{LAUNCH_AGENT_NAME}.plist"
LAUNCH_AGENT_PATH = os.path.join(LAUNCH_AGENT_DIR, LAUNCH_AGENT_FILE_NAME)

INSTALL_VENV_FILE_NAME = "ss_install_venv"
RUN_FILE_NAME = "ss_run"
LOG_FILE_NAME = "logs.log"

PLIST = Template(
    """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
        <string>${LAUNCH_AGENT_NAME}</string>
    <key>KeepAlive</key>
        <true/>
    <key>RunAtLoad</key>
        <true/>
    <key>ProgramArguments</key>
    <array>
        <string>/bin/sh</string>
        <string>${RUN_PATH}</string>
        <string>${DEST_DIR}</string>
    </array>
</dict>
</plist>
"""  # noqa: E501
)


def get_cmd_output(cmd: str, cmd_grep: str) -> None:
    ps = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
    out = subprocess.check_output(cmd_grep.split(), stdin=ps.stdout)
    ps.wait()
    print(out.decode("unicode_escape"), end="")


def run_cmd(cmd: str) -> None:
    print(f" + {cmd}")
    p = subprocess.Popen(
        cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    for line in p.stdout:
        print(line.decode("unicode_escape"), end="")
    p.wait()


def run_shell_script(path: str, args: str = "") -> None:
    run_cmd(f"sh {path} {args}".strip())


def install(args: argparse.Namespace) -> None:
    entrypoint = Path(args.entrypoint)
    requirements = Path(args.requirements)
    modules = args.modules.split(",") if args.modules else []
    env_file = Path(args.env_file) if args.env_file else None

    print("-> Uninstalling old files...")
    uninstall()

    print("-> Copying files...")
    os.makedirs(DEST_DIR)

    shutil.copyfile(entrypoint.absolute(), DEST_DIR / "entrypoint.py")
    shutil.copyfile(requirements.absolute(), DEST_DIR / "requirements.txt")

    for m in modules:
        shutil.copytree(m, DEST_DIR / m)

    if env_file:
        shutil.copyfile(env_file, DEST_DIR / ".env")

    # Installing run script
    shutil.copyfile(shutil.which(RUN_FILE_NAME), DEST_DIR / RUN_FILE_NAME)
    print(f"-> Creating LaunchAgent ({LAUNCH_AGENT_PATH})...")
    with open(LAUNCH_AGENT_PATH, "w") as f:
        f.write(
            PLIST.substitute(
                RUN_PATH=DEST_DIR / RUN_FILE_NAME,
                LAUNCH_AGENT_NAME=LAUNCH_AGENT_NAME,
                DEST_DIR=DEST_DIR,
            )
        )

    print("-> Installing python environment...")
    run_shell_script(shutil.which(INSTALL_VENV_FILE_NAME), args=DEST_DIR)

    print("-> Running launch agent...")
    run_cmd(f"launchctl load {LAUNCH_AGENT_PATH}")

    print("Done!")


def uninstall(_: argparse.Namespace = None) -> None:
    if os.path.isdir(DEST_DIR):
        shutil.rmtree(DEST_DIR)
    if os.path.isdir(DOT_DIR) and len(os.listdir(DOT_DIR)) == 0:
        os.rmdir(DOT_DIR)
    if os.path.exists(LAUNCH_AGENT_PATH):
        run_cmd(
            f"launchctl unload {LAUNCH_AGENT_DIR / LAUNCH_AGENT_FILE_NAME}"
        )
        os.remove(LAUNCH_AGENT_PATH)


def status(_: argparse.Namespace = None) -> None:
    get_cmd_output("launchctl list", f"grep {LAUNCH_AGENT_NAME}")


def logs(_: argparse.Namespace = None) -> None:
    run_cmd(f"tail -f {DEST_DIR / LOG_FILE_NAME}")


def main() -> None:
    parser = argparse.ArgumentParser("selenium_scheduler")
    subparsers = parser.add_subparsers(help="Sub-commands help")

    install_parser = subparsers.add_parser(
        "install", help="Install the scheduler into LaunchAgents"
    )
    install_parser.add_argument(
        "-e",
        "--entrypoint",
        required=True,
        type=str,
        dest="entrypoint",
        help="The path to the entrypoint that should be executed",
    )
    install_parser.add_argument(
        "-r",
        "--requirements",
        default="./requirements.txt",
        type=str,
        dest="requirements",
        help="The path to the python requirements",
    )
    install_parser.add_argument(
        "-m",
        "--modules",
        type=str,
        dest="modules",
        help="A list separted by ',' of dependency modules for the entrypoint",
    )
    install_parser.add_argument(
        "-env",
        "--env_file",
        type=str,
        dest="env_file",
        help="The path to an environment file",
    )
    install_parser.set_defaults(func=install)
    uninstall_parser = subparsers.add_parser(
        "uninstall", help="Uninstall the scheduler from LaunchAgents"
    )
    uninstall_parser.set_defaults(func=uninstall)

    status_parser = subparsers.add_parser(
        "status", help="Get the scheduler status from LaunchAgents"
    )
    status_parser.set_defaults(func=status)
    logs_parser = subparsers.add_parser(
        "logs", help="Get the logs from the scheduler"
    )
    logs_parser.set_defaults(func=logs)
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
